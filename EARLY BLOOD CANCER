!pip install tensorflow numpy matplotlib
import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import AdamW

# Paths to your dataset
train_dir = '/content/drive/MyDrive/blood cancer/train'
validation_dir = '/content/drive/MyDrive/blood cancer/test'

# Load and preprocess data
train_dataset = image_dataset_from_directory(
    train_dir,
    image_size=(180, 180),
    batch_size=32,
    label_mode='categorical'
)

validation_dataset = image_dataset_from_directory(
    validation_dir,
    image_size=(180, 180),
    batch_size=32,
    label_mode='categorical'
)

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(180, 180, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(len(train_dataset.class_names), activation='softmax')
])
import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory
import matplotlib.pyplot as plt
# Paths to your test dataset and model
test_dir = '/content/drive/MyDrive/blood cancer/test'
model_path = '/content/drive/MyDrive/Colab Notebooks/leukemia_model.h5'

# Load the test dataset
test_dataset = image_dataset_from_directory(
    test_dir,
    image_size=(180, 180),
    batch_size=32,
    label_mode='categorical'
)

# Load the trained model
model = tf.keras.models.load_model(model_path)

# # Evaluate the model
# loss, accuracy = model.evaluate(test_dataset)
# print(f"Test Loss: {loss:.4f}")
# print(f"Test Accuracy: {accuracy:.4f}")

# Optionally, visualize some test predictions
class_names = test_dataset.class_names

plt.figure(figsize=(10, 10))
for images, labels in test_dataset.take(1):hh++
306
    predictions = model.predict(images)
    predictions = tf.argmax(predictions, axis=1)
    for i in range(9):
        plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(f"Actual: {class_names[tf.argmax(labels[i])]}, Pred: {class_names[predictions[i]]}")
        plt.axis("off")
plt.show()
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import os
from PIL import Image
import numpy as np

# Load and preprocess the dataset
train_images = r'C:\Users\deepa\OneDrive\Documents\GOKUL\archive\train'
test_images = r'C:\Users\deepa\OneDrive\Documents\GOKUL\archive\valid'
dataset_path = r"C:\Users\deepa\OneDrive\Documents\GOKUL\archive"
# Load images from directory
batch_size = 32
img_height = 128
img_width = 128

# Check if the directory exists
if not os.path.isdir(dataset_path):
    raise FileNotFoundError(f"The directory {dataset_path} does not exist.")

train_images = tf.keras.preprocessing.image_dataset_from_directory(
    dataset_path,
    validation_split=0.8,  # 20% for validation
    subset="training",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    dataset_path,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

# Retrieve class names
class_names = train_images.class_names
num_classes = len(class_names)

# Normalize pixel values to [0, 1]
normalization_layer = tf.keras.layers.Rescaling(1./255)
train_images = train_images.map(lambda x, y: (normalization_layer(x), y))
val_ds = val_ds.map(lambda x, y: (normalization_layer(x), y))

# Prefetch data for better performance
AUTOTUNE = tf.data.AUTOTUNE
train_images = train_images.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)

# Define the CNN model
model = models.Sequential([
    layers.Input(shape=(img_height, img_width, 3)),  # Specify the input shape
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(num_classes, activation='softmax') # Number of classes
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
history = model.fit(train_images, epochs=10,
                    validation_data=val_ds)

# Evaluate the model
test_loss, test_acc = model.evaluate(val_ds, verbose=2)
print(f'\nTest accuracy: {test_acc}')



# Define the path to save the model
model_save_path =r'D:\saved_model.h5'

# Make sure the directory exists
os.makedirs(os.path.dirname(model_save_path), exist_ok=True)

# Save the model
try:
    model.save(model_save_path)
    print(f'Model saved to {model_save_path}')
except PermissionError as e:
    print(f'PermissionError: {e}')
except Exception as e:
    print(f'Error: {e}')

# Load the saved model
model = tf.keras.models.load_model(model_save_path)

# Function to preprocess and predict a new image
def preprocess_and_predict(image_path, model, class_names):
    # Load and preprocess the image
    img = Image.open(image_path).resize((img_width, img_height))
    img_array = np.array(img) / 255.0  # Normalize pixel values
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

    # Predict the class
    predictions = model.predict(img_array)
    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = np.max(predictions[0])

    return predicted_class, confidence

new_image_path = input("Enter Image Path: ")
predicted_class, confidence = preprocess_and_predict(new_image_path, model, class_names)

print(f'Predicted class: {predicted_class}')
print(f'Confidence: {confidence:.2f}')
model.save(model_save_path)
# Compile the model
model.compile(
    optimizer=AdamW(),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Train the model
history = model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=10
)

# Save the model
model.save('/content/drive/MyDrive/Colab Notebooks/leukemia_model.h5')

